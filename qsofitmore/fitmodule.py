#!/usr/bin/env python
from mmap import MAP_ANONYMOUS
import sys
import glob
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
import sfdmap
from scipy import interpolate
from scipy import integrate
from kapteyn import kmpfit
from PyAstronomy import pyasl
from astropy.io import fits
from astropy.cosmology import FlatLambdaCDM
from astropy.modeling.blackbody import blackbody_lambda
from astropy.table import Table
from astropy.coordinates import SkyCoord
from astropy import units as u
from PyQSOFit import QSOFit
from .extinction import *
import pkg_resources

datapath = pkg_resources.resource_filename('PyQSOFit', '/')

__all__ = ['QSOFitNew']

class QSOFitNew(QSOFit):

    def __init__(self, lam, flux, err, z, ra=- 999., dec=-999., name=None, plateid=None, mjd=None, fiberid=None, 
                 path=None, and_mask=None, or_mask=None, is_sdss=True):
        """
        Get the input data perpared for the QSO spectral fitting
        
        Parameters:
        -----------
        lam: 1-D array with Npix
             Observed wavelength in unit of Angstrom
             
        flux: 1-D array with Npix
             Observed flux density in unit of 10^{-17} erg/s/cm^2/Angstrom
        
        err: 1-D array with Npix
             1 sigma err with the same unit of flux
             
        z: float number
            redshift
        
        ra, dec: float number, optional 
            the location of the source, right ascension and declination. The default number is 0
        name: str
            name of the object
        
        plateid, mjd, fiberid: integer number, optional
            If the source is SDSS object, they have the plate ID, MJD and Fiber ID in their file herader.
            
        path: str
            the path of the input data
            
        and_mask, or_mask: 1-D array with Npix, optional
            the bad pixels defined from SDSS data, which can be got from SDSS datacube.
        """
        
        self.lam = np.asarray(lam, dtype=np.float64)
        self.flux = np.asarray(flux, dtype=np.float64)
        self.err = np.asarray(err, dtype=np.float64)
        self.z = z
        self.and_mask = and_mask
        self.or_mask = or_mask
        self.ra = ra
        self.dec = dec
        self.name = name
        self.plateid = plateid
        self.mjd = mjd
        self.fiberid = fiberid
        self.path = path    
        self.is_sdss = is_sdss

    @classmethod
    def fromiraf(cls, fname, redshift=None, path=None, plateid=None, mjd=None, fiberid=None):
        """
        Initialize QSOFit object from a custom fits file
        generated by IRAF.
        Parameters:
        ----------
            fname : str
                name of the fits file.
            redshift : float
                redshift of the spectrum. Should be provided if not recorded in the fits header.
            path : str
                working directory.
        Returns:
        ----------
            cls : class
                A QSOFit object.
        Other parameters:
        ----------
            plateid, mjd, and fiberid: int
                Default None for non-SDSS spectra.
        Example:
        ----------
        q = QSOFit.fromiraf("custom_iraf_spectrum.fits", redshift=0.01, path=path)
        """
        hdu = fits.open(fname)
        header = hdu[0].header
        objname = header['object']
        # if plateid is None:
        #     plateid = 0
        # if mjd is None:
        #     mjd = 0
        # if fiberid is None:
        #     fiberid = 0
        if redshift is None:
            try:
                redshift = float(header['redshift'])
            except:
                print("Redshift not provided, setting redshift to zero.")
                redshift = 0
        try:
            ra = float(header['ra'])
            dec = float(header['dec'])
        except:
            coord = SkyCoord(header['RA']+header['DEC'], 
                             frame='icrs',
                             unit=(u.hourangle, u.deg))
            ra = coord.ra.value
            dec = coord.dec.value
        if path is None:
            path = './'
        CRVAL1 = float(header['CRVAL1'])
        CD1_1 = float(header['CD1_1'])
        CRPIX1 = float(header['CRPIX1'])
        data = hdu[0].data
        dim = len(data.shape)
        if dim==1:
            l = len(data)
            wave = np.linspace(CRVAL1, 
                               CRVAL1 + (l - CRPIX1) * CD1_1, 
                               l)
            flux = data
            err = None
        elif dim==3:
            l = data.shape[2]
            print(repr(l))
            wave = np.linspace(CRVAL1, 
                               CRVAL1 + (l - CRPIX1) * CD1_1, 
                               l)
            flux = data[0,0,:]
            err = data[3,0,:]
        else:
            raise NotImplementedError("The IRAF spectrum has yet to be provided, not implemented.")
        hdu.close() 
        flux *= 1e17
        err *= 1e17
        return cls(lam=wave, flux=flux, err=err, z=redshift, ra=ra, dec=dec, name=objname, plateid=plateid, 
                   mjd=mjd, fiberid=fiberid, path=path, is_sdss=False)

    def setmapname(self, mapname):
        """
        Parameters:
            mapname : str
                name of the dust map. Currently only support
                'sfd' or 'planck'.
        """
        mapname = str(mapname).lower()
        self.mapname = mapname

    def _DeRedden(self, lam, flux, err, ra, dec, dustmap_path):
        """Correct the Galactic extinction"""
        try:
            print("The dust map is {}".format(self.mapname))
        except AttributeError:
            print('`mapname` for extinction not set.\nSetting `mapname` to `sfd`.')
            mapname = 'sfd'
            self.mapname = mapname
        if self.mapname == 'sfd':
            m = sfdmap.SFDMap(dustmap_path)
            zero_flux = np.where(flux == 0, True, False)
            flux[zero_flux] = 1e-10
            flux_unred = pyasl.unred(lam, flux, m.ebv(ra, dec))
            err_unred = err*flux_unred/flux
            flux_unred[zero_flux] = 0
            del self.flux, self.err
            self.flux = flux_unred
            self.err = err_unred
        elif self.mapname == 'planck':
            self.ebv = getebv(self.ra, self.dec, mapname=self.mapname)
            Alam = wang2019(self.lam, self.ebv)
            zero_flux = np.where(flux == 0, True, False)
            flux[zero_flux] = 1e-10
            flux_unred = deredden(Alam, self.flux) 
            err_unred = err*flux_unred/flux
            flux_unred[zero_flux] = 0
            del self.flux, self.err
            self.flux = flux_unred
            self.err = err_unred           
        return self.flux


    def _HostDecompose(self, wave, flux, err, z, Mi, npca_gal, npca_qso, path):
        path = datapath
        return super()._HostDecompose(wave, flux, err, z, Mi, npca_gal, npca_qso, path)

    
    def _DoContiFit(self, wave, flux, err, ra, dec, plateid, mjd, fiberid):
        if self.plateid is None:
            plateid = 0
        if self.plateid is None:
            mjd = 0
        if self.plateid is None:
            fiberid = 0
        tmp_selfpath = self.path
        self.path = datapath
        try:
            return super()._DoContiFit(wave, flux, err, ra, dec, plateid, mjd, fiberid)
        finally:
            self.path = tmp_selfpath

    def Fit(self, name=None, nsmooth=1, and_or_mask=True, reject_badpix=True, deredden=True, wave_range=None,
            wave_mask=None, decomposition_host=True, BC03=False, Mi=None, npca_gal=5, npca_qso=20, Fe_uv_op=True,
            Fe_flux_range=None, poly=False, BC=False, rej_abs=False, initial_guess=None, MC=True, n_trails=1,
            linefit=True, tie_lambda=True, tie_width=True, tie_flux_1=True, tie_flux_2=True, save_result=True,
            plot_fig=True, save_fig=True, plot_line_name=True, plot_legend=True, dustmap_path=None, save_fig_path=None,
            save_fits_path=None, save_fits_name=None):
        if name is None and save_fits_name is not None:
            name = save_fits_name
            print("Name is now {}.".format(name))
        elif name is None and save_fits_name is None:
            name = self.name
            print("Name is now {}.".format(name))
        else:
            pass
        if self.is_sdss == False and name is None:
            print("Bad figure name!")
        return super().Fit(name=name, nsmooth=nsmooth, and_or_mask=and_or_mask, reject_badpix=reject_badpix, 
                           deredden=deredden, wave_range=wave_range, wave_mask=wave_mask, 
                           decomposition_host=decomposition_host, BC03=BC03, Mi=Mi, npca_gal=npca_gal, 
                           npca_qso=npca_qso, Fe_uv_op=Fe_uv_op, Fe_flux_range=Fe_flux_range, poly=poly, 
                           BC=BC, rej_abs=rej_abs, initial_guess=initial_guess, MC=MC, n_trails=n_trails, 
                           linefit=linefit, tie_lambda=tie_lambda, tie_width=tie_width, tie_flux_1=tie_flux_1, 
                           tie_flux_2=tie_flux_2, save_result=save_result, plot_fig=plot_fig, 
                           save_fig=save_fig, plot_line_name=plot_line_name, plot_legend=plot_legend, 
                           dustmap_path=dustmap_path, save_fig_path=save_fig_path, save_fits_path=save_fits_path, 
                           save_fits_name=save_fits_name)


    def _PlotFig(self, ra, dec, z, wave, flux, err, decomposition_host, linefit, tmp_all, gauss_result, f_conti_model,
                 conti_fit, all_comp_range, uniq_linecomp_sort, line_flux, save_fig_path):
        """Plot the results"""
        
        self.PL_poly = conti_fit.params[6]*(wave/3000.0)**conti_fit.params[7]+self.F_poly_conti(wave,
                                                                                                conti_fit.params[11:])
        
        matplotlib.rc('xtick', labelsize=20)
        matplotlib.rc('ytick', labelsize=20)
        
        if linefit == True:
            fig, axn = plt.subplots(nrows=2, ncols=np.max([self.ncomp, 1]), figsize=(15, 8),
                                    squeeze=False)  # prepare for the emission line subplots in the second row
            ax = plt.subplot(2, 1, 1)  # plot the first subplot occupying the whole first row
            if self.MC == True:
                mc_flag = 2
            else:
                mc_flag = 1
            
            lines_total = np.zeros_like(wave)
            line_order = {'r': 3, 'g': 7}  # to make the narrow line plot above the broad line
            
            temp_gauss_result = gauss_result
            for p in range(int(len(temp_gauss_result)/mc_flag/3)):
                # warn that the width used to separate narrow from broad is not exact 1200 km s-1 which would lead to wrong judgement
                if self.CalFWHM(temp_gauss_result[(2+p*3)*mc_flag]) < 1200.:
                    color = 'g'
                else:
                    color = 'r'
                
                line_single = self.Onegauss(np.log(wave), temp_gauss_result[p*3*mc_flag:(p+1)*3*mc_flag:mc_flag])
                
                ax.plot(wave, line_single+f_conti_model, color=color, zorder=5)
                for c in range(self.ncomp):
                    axn[1][c].plot(wave, line_single, color=color, zorder=line_order[color])
                lines_total += line_single
            
            ax.plot(wave, lines_total+f_conti_model, 'b', label='line',
                    zorder=6)  # supplement the emission lines in the firs subplot
            for c in range(self.ncomp):
                axn[1][c].plot(wave, lines_total, color='b', zorder=10)
                axn[1][c].plot(wave, self.line_flux, 'k', zorder=0)
                
                axn[1][c].set_xlim(all_comp_range[2*c:2*c+2])
                f_max = line_flux[
                    np.where((wave > all_comp_range[2*c]) & (wave < all_comp_range[2*c+1]), True, False)].max()
                f_min = line_flux[
                    np.where((wave > all_comp_range[2*c]) & (wave < all_comp_range[2*c+1]), True, False)].min()
                axn[1][c].set_ylim(f_min*0.9, f_max*1.1)
                axn[1][c].set_xticks([all_comp_range[2*c], np.round((all_comp_range[2*c]+all_comp_range[2*c+1])/2, -1),
                                      all_comp_range[2*c+1]])
                axn[1][c].text(0.02, 0.9, uniq_linecomp_sort[c], fontsize=20, transform=axn[1][c].transAxes)
                axn[1][c].text(0.02, 0.80, r'$\chi ^2_r=$'+str(np.round(float(self.comp_result[c*6+3]), 2)),
                               fontsize=16, transform=axn[1][c].transAxes)
        else:
            fig, ax = plt.subplots(nrows=1, ncols=1,
                                   figsize=(15, 8))  # if no lines are fitted, there would be only one row
        
        if self.ra == -999. or self.dec == -999.:
            ax.set_title(str(self.sdss_name)+'   z = '+str(np.round(z, 4)), fontsize=20)
        else:
            ax.set_title('ra,dec = ('+str(ra)+','+str(dec)+')   '+str(self.sdss_name)+'   z = '+str(np.round(z, 4)),
                         fontsize=20)
        
        ax.plot(self.wave_prereduced, self.flux_prereduced, 'k', label='data', zorder=2)
        
        if decomposition_host == True and self.decomposed == True:
            ax.plot(wave, self.qso+self.host, 'pink', label='host+qso temp', zorder=3)
            ax.plot(wave, flux, 'grey', label='data-host', zorder=1)
            ax.plot(wave, self.host, 'purple', label='host', zorder=4)
        else:
            host = self.flux_prereduced.min()
        
        ax.scatter(wave[tmp_all], np.repeat(self.flux_prereduced.max()*1.05, len(wave[tmp_all])), color='grey',
                   marker='o')  # plot continuum region
        
        ax.plot([0, 0], [0, 0], 'r', label='line br', zorder=5)
        ax.plot([0, 0], [0, 0], 'g', label='line na', zorder=5)
        ax.plot(wave, f_conti_model, 'c', lw=2, label='FeII', zorder=7)
        if self.BC == True:
            ax.plot(wave, self.f_pl_model+self.f_poly_model+self.f_bc_model, 'y', lw=2, label='BC', zorder=8)
        ax.plot(wave,
                conti_fit.params[6]*(wave/3000.0)**conti_fit.params[7]+self.F_poly_conti(wave, conti_fit.params[11:]),
                color='orange', lw=2, label='conti', zorder=9)
        if self.decomposed == False:
            plot_bottom = flux.min()
        else:
            plot_bottom = min(self.host.min(), flux.min())
        
        ax.set_ylim(plot_bottom*0.9, self.flux_prereduced.max()*1.1)
        
        if self.plot_legend == True:
            ax.legend(loc='best', frameon=False, ncol=2, fontsize=10)
        
        # plot line name--------
        if self.plot_line_name == True:
            line_cen = np.array(
                [6564.60, 6549.85, 6585.27, 6718.29, 6732.66, 4862.68, 5008.24, 4687.02, 4341.68, 3934.78, 3728.47,
                 3426.84, 2798.75, 1908.72, 1816.97, 1750.26, 1718.55, 1549.06, 1640.42, 1402.06, 1396.76, 1335.30, \
                 1215.67])
            
            line_name = np.array(
                ['', '', r'H$\alpha$+[NII]', '', '[SII]6718,6732', r'H$\beta$', '[OIII]', 'HeII4687', r'H$\gamma$', 
                 'CaII3934', '[OII]3728',
                 'NeV3426', 'MgII', 'CIII]', 'SiII1816', 'NIII]1750', 'NIV]1718', 'CIV', 'HeII1640', '', 'SiIV+OIV',
                 'CII1335', r'Ly$\alpha$'])
            
            for ll in range(len(line_cen)):
                if wave.min() < line_cen[ll] < wave.max():
                    ax.plot([line_cen[ll], line_cen[ll]], [plot_bottom*0.9, self.flux_prereduced.max()*1.1], 'k:')
                    ax.text(line_cen[ll]+7, 1.08*self.flux_prereduced.max(), line_name[ll], rotation=90, fontsize=10,
                            va='top')
        
        ax.set_xlim(wave.min(), wave.max())
        
        if linefit == True:
            ax.text(0.5, -1.4, r'$\rm Rest \, Wavelength$ ($\rm \AA$)', fontsize=20, transform=ax.transAxes,
                    ha='center')
            ax.text(-0.1, -0.1, r'$\rm f_{\lambda}$ ($\rm 10^{-17} erg\;s^{-1}\;cm^{-2}\;\AA^{-1}$)', fontsize=20,
                    transform=ax.transAxes, rotation=90, ha='center', rotation_mode='anchor')
        else:
            plt.xlabel(r'$\rm Rest \, Wavelength$ ($\rm \AA$)', fontsize=20)
            plt.ylabel(r'$\rm f_{\lambda}$ ($\rm 10^{-17} erg\;s^{-1}\;cm^{-2}\;\AA^{-1}$)', fontsize=20)
        
        if self.save_fig == True:
            plt.savefig(save_fig_path+self.sdss_name+'.pdf')
        plt.show()
        plt.close()